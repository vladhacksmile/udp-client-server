import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

import static javax.swing.JOptionPane.showMessageDialog;

public class MainForm implements ILocalized {
    private JPanel panel1;
    private JTextField textField1;
    private JPasswordField passwordField1;
    private JButton authButton;
    private JButton regButton;
    private JLabel messageLabel;
    private JComboBox comboBox1;
    private JLabel loginLabel;
    private JLabel passwordLabel;
    private JFrame frame;
    private LobbyForm lobbyForm;
    private boolean loaded;

    public MainForm() {
        frame = new JFrame("Авторизация");
        $$$setupUI$$$();
        frame.setSize(800, 800);
        frame.add(panel1);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setMinimumSize(new Dimension(450, 250));
        frame.pack();
        frame.setLocationRelativeTo(null);
        panel1.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));

        authButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                authAction();
            }
        });
        regButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                regAction();
            }
        });
        textField1.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // TODO
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        passwordField1.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                authAction();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        localize();

        loaded = true;
        comboBox1.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                LocaleManager.setLanguageId(comboBox1.getSelectedIndex());
                localize();
            }
        });
    }

    public LobbyForm getLobbyForm() {
        return lobbyForm;
    }

    public JLabel getMessageLabel() {
        return messageLabel;
    }

    public static void showMessage(String text) {
        showMessageDialog(null, text);
    }

    public JFrame getFrame() {
        return frame;
    }

    public void authorized() {
        frame.dispose();
        if (lobbyForm == null) {
            lobbyForm = new LobbyForm();
        } else {
            lobbyForm.getFrame().setVisible(true);
        }
        lobbyForm.localize();
        Main.mainForm.getLobbyForm().getComboBox2().setSelectedItem(LocaleManager.getLanguageId());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setMinimumSize(new Dimension(300, 300));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        textField1 = new JTextField();
        textField1.setPreferredSize(new Dimension(200, 30));
        panel2.add(textField1);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel3, gbc);
        passwordField1 = new JPasswordField();
        passwordField1.setPreferredSize(new Dimension(200, 30));
        panel3.add(passwordField1);
        loginLabel = new JLabel();
        loginLabel.setText("Введите логин:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel1.add(loginLabel, gbc);
        passwordLabel = new JLabel();
        passwordLabel.setText("Введите пароль:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(passwordLabel, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel4, gbc);
        authButton = new JButton();
        authButton.setPreferredSize(new Dimension(200, 30));
        authButton.setText("Авторизоваться");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel4.add(authButton, gbc);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel5, gbc);
        regButton = new JButton();
        regButton.setPreferredSize(new Dimension(200, 30));
        regButton.setText("Зарегистрироваться");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel5.add(regButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel5.add(spacer1, gbc);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel6, gbc);
        messageLabel = new JLabel();
        Font messageLabelFont = this.$$$getFont$$$("Muna", -1, -1, messageLabel.getFont());
        if (messageLabelFont != null) messageLabel.setFont(messageLabelFont);
        messageLabel.setForeground(new Color(-917499));
        messageLabel.setRequestFocusEnabled(true);
        messageLabel.setText("Соединение с сервером...");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel6.add(messageLabel, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel6.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel6.add(spacer3, gbc);
        comboBox1 = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(comboBox1, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    public void authAction() {
        Auth.username = textField1.getText();
        Auth.password = new String(passwordField1.getPassword());
        Auth.authorized();
        Command command = new Command(new User(Auth.username, Utils.getHash(Auth.password, "SHA-384"), LocaleManager.getLanguageId()), Utils.formRequest("auth"), null);
        UDPSocketClient.send(command);
    }

    public void regAction() {
        Auth.username = textField1.getText();
        Auth.password = new String(passwordField1.getPassword());
        Auth.authorized();
        Command command = new Command(new User(Auth.username, Utils.getHash(Auth.password, "SHA-384"), LocaleManager.getLanguageId()), Utils.formRequest("reg"), null);
        UDPSocketClient.send(command);
    }

    public JComboBox getComboBox1() {
        return comboBox1;
    }

    public boolean isLoaded() {
        return loaded;
    }

    @Override
    public void localize() {
        frame.setTitle(LocaleManager.getBundle().getString("authorization"));
        loginLabel.setText(LocaleManager.getBundle().getString("enter_login"));
        passwordLabel.setText(LocaleManager.getBundle().getString("enter_password"));
        authButton.setText(LocaleManager.getBundle().getString("auth"));
        regButton.setText(LocaleManager.getBundle().getString("register"));
        messageLabel.setText(LocaleManager.getBundle().getString("connecting"));
        if (comboBox1.getItemCount() == 0) {
            comboBox1.addItem(LocaleManager.getBundle().getString("lang_ru"));
            comboBox1.addItem(LocaleManager.getBundle().getString("lang_no"));
            comboBox1.addItem(LocaleManager.getBundle().getString("lang_hr"));
            comboBox1.addItem(LocaleManager.getBundle().getString("lang_en"));
        }
    }
}
